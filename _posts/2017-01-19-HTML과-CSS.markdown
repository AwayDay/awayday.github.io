---
layout: post
title: "[난장판]HTML과 CSS"
description: "사람에게는 눈이 있다"
tags: [web, html, css]
---

# 들어가기 전에
* 이 포스트의 거의 모든 내용은 NHN Ent. 강의 내용에서 발췌함
    * 내 손가락이 느려서 제대로 못 썻는데, 언젠가 정리할거임.

# 웹의 3요소
* HTML, CSS, 자바스크립트
    * 구조적, 모양적, 행독적 요소
* 잘 만들어야 구조적, 재사용 가능한, 멋진 사이트가 나온다

# 에이치티엠엘
* 링크를 통한 자원 접근
* 문서 데이터 구조를 만들고, CSS로 표현함

## 구조
* 독타입
* 에치티엠엘
    * 헤드
        * 타이틀
        * 메타 태그 : 많은 종류! / 꼭 알아야 할 것은 있음
            * 캐릭터셋
            * ie 호환성 태그
            * 뷰포트 : 미디어쿼리 쓸 때 반드시 선언해야 함.
            * 프리뷰 보여주는 그것도 메타태그 내용으로 하는거임
            * 상대적 기본 유알엘도 여기서
            * 링크는 주로 스타일 시트를 임포트할 때 사용, 혹은 파비콘이나
            * 안티패턴도 숙지해야

## 웹 표준
* 특정 브라우저가 아니라 모든 브라우저에서 사용 가능하도록
    * 접근성, 호환성, 유지비용 감소

## 시멘틱 마크업
* 웹표준 + 가치
    * 나는 어떤 의미를 가지고 있는가?
    * 태그만 으로 문서의 논리적 내용을 할 수 있음
* 다양한 태그
    * 사실상 역할은 div랑 같은 기능을 한다.

## 독타입
* 브라우저에게 문서 읽기 방식을 지정해줌
    * 이걸 보고 브라우저가 모드를 결정해줌
    * 사실상 5의 `<!독타입 html>`만 기억하면 됨
* 생략하면
    * 브라우저는 쿼크 모드로 해석 : 비표준 모드 - 호환성 문제 있을 수도!

# CSS
* 캐스케이딩 스타일 시트
    * 상속을 통해 적용됨

## 상속
* 부모에 선언된 속성이 자식에게 영향을
* 모든 속성이 상속되는 것은 아님.
    * 마진이 상속되면 헬게이트 열린다.

## 인라인 태그
* 각 태그마다 적어야 해서 불편, 분리도 안 됨, 최우선이기 때문에 상속구조에서도 영 안 좋음.

## 임베디드
* 주로 각 문서의 헤드 안에 씀

## 익스터널
* 별도의 cSS 파일로 분리함

## 임포트
* CSS 내부에서 다른 CSS를 상속받음

## CSS 선택자
* 어느 엘리먼트를 선택할 것인가
* 기본 선택자(tag)
* id
* class
* 속성
    * input[type="button"]
* 전체 : 하위에 모두 적용
    * `div *`
    * 안티패턴임
* 자식 선택자
    * 상위 > 바로 하위
* 자손 선택자
    * 상위 어딘가의하위
* 형제 선택자
    * 형제1 + 향제2
    * 형제1 바로 옆에 형제 2가 있을 경우에만 선택
    * 형제1 ~ 형제2

## 복합 선택자
* 유사-클래스
    * 호버, 액티브, 포커스 등, 특정 상태에서 __태그처럼__ 취급됨.
    * `a:hover`
* 유사-엘리먼트
    * 첫 번째 글자, 마지막 글자 등, 그야말로 세세한 내용
* 가상 요소 : 애프터-비포
    * 많이 쓰이는 내용임
    * `div::before` 로 선언해서 씀, 앞뒤로 뭐가 온다

## 선택자의 우선순위
* 잘 모르면 이거 하다 꼬인다!
* 간단하게 생각하면 점수 시스템

## 디스플레이 속성
* `display: XX`
* 블록 : 위드 하잍 마진 패딩
    * 기본적으로는 한 줄을 모두 차지
    * 마진: x 오토를 통해 가운데 정렬
* 인라인
    * 컨텐츠 길이만큼 넓이
    * 여러 요소와 같이 한 행에 있을 수 있음.
    * 마진도 없고 높이도 없다
* 인라인-블록
    * 인라인과 비슷하지만 높이를 가질 수 있음.
    * 마진도 패딩도 잘 먹음
    * 주로 인라인의 속성을 바꿀 때 쓰임
* 인라인 안에는 블록을 넣을 수 없다
    * 인라인-블록으로 바꿔야 가능!
* 논과 히든
    * 둘 다 사라지는 효과
    * 논은 아예 영역도 사라짐.
    * 히든은 영역은 남긴다.
* 플렉스
    * css3의 새 속성
    * 정렬이 안 되거나 옮기기가 안 되거나 할 때 유용함
        * 유동적 레이아웃의 이득!
    * 높이 속성 등을 적용 안 해도 알아서 크기를 차지하고, 어머 멋져.
    * 큰 활용도
    * 그러나 좀 어렵다.
    * 예시
        * 플렉스 블록 두 개에 대해 하나만 넓이를 지정해줘도 나머지는 남은 공간을 쭉 채우는 느낌으로 간다.
        * (반드시 있는 영역) - (있을 수도 없을 수도 있는 영역) - (있는 영역) - (푸터)
            * 에서 레이아웃 잡을 때도 유용함!

## 포지션
* 픽스드
    * 아무리 하위라도 픽스드가 설정되면 위치 고정됨
    * 모달이나 푸터에 주로 사용

## 플로트
* 플롯이 되는 순간 부모의 속성을 잃어버림
    * 비어 있는 div에 클리어:보쓰를 넣어 해결하거나....

## 오버플로
* 자식요소가 부모요소를 벗어났을 때
    * 기본은 비지블, 보임
    * 가리거나, 스크롤을 설정하거나
    * 오토는 컨텐츠 길이에 따라 알아서 슼롤을 줌

## z-index
* 간단히 말하면 레이어.

## 박스-모델
* 컨텐츠 : 실제 내용
* 패딩 : 컨텐츠를 감싸는 영역
* 보더 : 패딩을 둘러싼 영역
* 마진 : 보더의 바깥
    * 컨텐츠는 사실상 보더까지, 마진은 바깥임.
* 보더 박스와 컨텐츠 박스
    * 보더 박스는 컨텐츠를 컨텐츠+패딩+보더까지 따지기 때문에 이쪽이 내가 예상한 크기에 가장 부합함.
    * 컨텐츠 박스는 패딩과 보더 사이즈가 가산됨.
* 박스를 잘 알아야 디자인을 잘 해먹는다!

## 축약 표현
* 몇 몇 표현은 줄여서 쓸 수 있다!
* 순서를 지켜라
* 얘네는 긴 표현을 초기화 시킬 수 있다.

# HTML/CSS 팁
* 이것들을 다루는 팁들

## 두레이 로그인 화면은 통짜 cSS로 만들어져 있음.
* 인풋 박스, 체크박스 등 확인 가능

## MDN
* 가보면 웬만한 내용은 거의 다 있음
* w3schools는 그다지 권장되지 않음.

## important
* 최대한 줄여야 함
* 남발하다보면 이걸 덮기 위해 다른 것에 임포턴트를 해야 하고....(반복)

## 디자인 스프라이트
* 여러 개의 개별 이미지를 파일로 합치고, 사용할 때에는 css의 백그라운드 이미지, 포지션 속성을 사용해서 이미지의 특정 부분만 노출시킴
* 특정 위치를 찾아서

## 폰트-어썸
* 일반적 아이콘을 표현하는데 좋음, 심지어 벡터 디자인임.
* 폰트어썸 파일만 임포트하면 라인에서 손쉽게 적용 가능

## 크로스 브라우징 하기
* 브라우저마다 디폴트로 적용된 속성이 있음
* 리셋 CSS를 통해 전부 초기화 가능하다.
* CSS 속성엔 시험 중인 것도, 지원이 안 되는 것도 있음(브라우저 탐)
    * 확인이 필요
* 브라우저별로 시험 중인 속성에 대해 밴더 프리픽스를 붙임
    * 시험 중이라는 의미다!
    * sass같은 프리 프로세서 쓰면 알아서 붙여줌

## 최적화 하기
* 미니파이, 컨캣 가능
    * html은 미니파이만 가능
* Lint, Tidy 등 사용

## CSS 셀렉터에 따른 탐색 비용
* 브라우저의 태그를 쭈르륵 읽어서 CSSOM 트리를 구성함
* 간결한 구성을 하면 조금 더 성능이 올라가....는데!
* 큰 성능 차이는 안 난다.
* 복잡하고 남발되는 \*를 하는 것은 지양하자

## 테이블 태그는 잘 쓰지 않는다
* 안 쓴다 안 써!
* 주로 div 등을 써서 테이블-라이크 하게 만든다
* 그러나 메일에서는 테이블 태그를 써야 함
    * 대부분 오래된 시스템이거든.

## calc를 통한 레이아웃 조절
* clac(100% - 80px)
* 놀랍다 놀라워

## 미디어 쿼리
* 픽셀에 따라 내부 CSS가 분기됨
* 반응형 웹 제작에 많이 사용됨.

## 반응형
* \%와 em을 사용하자
    * 픽셀은 절대값
    * 그러나 퍼센트와 이엠은 상대값임(퍼센트)
        * em은 부모에 대한 상대값임.
* em은 바로 위 부모의 배수이기 때문에 중첩 상속하다보면 난리남
* 그래서 rem이 나옴, html의 폰트사이즈를 기준으로 함.

## CSS의 우선순위
* __그런거 없다__
* 그러나 공통된 가이드는 있으면 편하다.

## HTML 문서의 언어 설정
* HTML 태그에 언어ㅓ 명시
* 메타 태그의 캐릭터 셋을 명시
* HTML5에선 이것 두 개로 오케이야!

## 파비콘
* 브라우져 별로 사이즈가 다르게 나옴
    * 호환성을 고려하여 여러 사이즈를 준비해주자

## CSS 전처리기
* css의 한계를 극복하기 위한 물건들
* 간단한 유지보수, 편리한 사용 등 여러 장점
* SASS 등이 있다.
* 일단 있다 정도만 알아두면 좋다.

### Sass, Less
* Sass가 요즘 잘 나감.

## HTML5의 다양한 input 속성들을 활용하면 좋다
* 기본적 텍스트 체크박스 이외에도 컬러 데이트 등 다양한 종류의 인풋이 있다.
* 와 멋진데.

## CSS의 스코프
* 가끔 css에서도 독립된 스코프를 주고 싶을 때가 있다.
    * 어디엔 뭐만 먹이고 싶음
* 요즘은 문서 내부에서 원하는 위치에 스타일 선언하면 스코프가 된다고 함.

## span 태그 양 옆의 공간
* 대부분 줄바꿈 때문임
    * 스팬 태그를 붙여 쓴다
    * 상위 엘리먼트의 폰트 사이즈를 0으로 붙여 쓴다

## transition과 animation
* 무한한 가능성을 지님
* 실감나고 재밌는 인터페이스
* 엄청난 반응성

## 캔버스와 SVG
* 캔버스
    * 픽셀 기반
    * 한 번 실행하는 웹게임 등에 사용
    * 한번 만들고 스크립트에 의해 수정됨
* SVG
    * 복잡한 모양을 쓸 때 사용
