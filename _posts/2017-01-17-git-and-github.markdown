---
layout: post
title: "Git와 Github"
description: "형상관리의 묘"
tags: [study, Git]
---

# 들어가기 전에
* 이 포스트는 NHN Ent 기술 강의 시간에 들은 내용을 바탕으로 작성되었음.

# 버전 관리 시스템
* 파일의 변화를 시간에 따라 기록하여 특정 시점의 버전으로 다시 불러올 수 있음
* 개별 파일 또는 프로젝트 전체를 이전 상태로 되돌릴 수 있음
* 시간에 따른 변경 사항을 기록 검토
* 문제가 되는 부분을 누가 수정하였는가 확인 가능
* 파일이 누락되거나 잘못된 경우에도 쉽게 복구 가능

## 버전 관리 이전엔
* 폴더 등으로 관리했지

## 로컬 버전 관리 시스템
* 대부분의 사람들이 버전 관리를 하기 위해 디렉터리나 파일 등을 복사해둠
* 인력 = 실수할 가능성 많음
* 그래서 고대의 선각자들은 디비에 파일 이력을 저장하는 시스템을 개발하였음.

### 문제점
* 나 혼자 쓰면 유용함
        * 우왕 ㅋ 굿 ㅋ
* 그런데 같이 쓰면....?

## 중앙 집중식 버전 관리 시스템
* SVN 등
* 파일을 저장하는 하나의 서버 존재
* 중앙에서 파일을 가져오는 각각의 클라이언트(=개발자)

### 장점
* 누구나 다른 사람이 무엇을 하고 있는지 알 수 있음
* 수많은 클라이언트의 로컬 디비를 관리하는 것보다는 중앙 디비 관리가 훨씬 쉬움

### 단점
* 중앙집중식 = 중앙이 죽으면....?
        * 아 망했어요 아 망했어요
* 서버가 다운되면 복구 때까지 협업도 뭐도 아무 것도 못함.

## 분산 버전 관리 시스템
* Git 등
* 서버의 복제를 각 클라이언트에서 가지고 있음
* 서버가 죽어도 어느 누군가의 복제를 서버에 다시 올리면 됨, 간단!
        * 그나마

# Git
* 우리의 아이돌 리누스 토발즈 아재가 개발
        * 비트키퍼라는 상용 형상관리 툴이 있었는데, 개발이 중단됨
        * 음 내가 만들면 되겠군
* 빠른 속도, 단순한 구조, 비선형 개발, 완전한 분산, 대형 프로젝트에서도 유용할 것을 목표로 함.

## 스냅샷
* Git의 변경 이력 저장 방식
        * SVN은 델타로 저장함
* 스냅샷의 특징
        * 그냥 변경된 파일이 있으면 통째로 저장함
        * 특정 시점으로 체크아웃 하는 속도가 굉장히 고속 : 스냅샷을 받아오면 장땡이니....

## 로컬
* 거의 대부분의 명령이 로컬에서 실행됨
        * 물론 푸시 풀은 빼고
        * 형상관리에 있어 핵심적인, 대부분의 동작이 로컬에서 돌아감

## 무결성
* 깃은 어떻게 데이터를 저장할까?
* 해시와 체크섬
        * 파일에 대한 체크섬을 구해서
        * 무결성을 체크합니다.
* .git 디렉터리의 하위를 보면
        * 어떤 가지의 폴더를 들어가서, 아무 파일이나 열어보면 체크섬 달랑 있음.

## 상태

### 커미티드
* 어떤 파일이 깃 저장소에 저장된 상태

### 모디파이드
* 커미티드 된 파일에 수정이 발생하였을 때.

### 스테이지드
* 모디파이드 된 파일을 커밋하기 위한 준비 단계

## 대강의 작업 플로우
* 워킹 디렉터리에서 파일 수정(모디파이드)
* 스테이지에 올리기(스테이지드)
* 커밋(커미티드)