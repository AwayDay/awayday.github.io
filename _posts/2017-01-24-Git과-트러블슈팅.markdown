---
layout: post
title: "Git과 트러블슈팅"
description: "사람에게는 눈이 있다"
tags: [git, project]
---

# 들어가기 전에
* 1월 24일 NHN Ent. 깃과 트러블슈팅 강의 내용 요약정리

# 흔한 팀과제
* 나누고
* 설계하고
* 따로 만들어서
* 푸시하면
* 컨틀릭트!

## 그러면?
* 풀을 받고....
* 붕붕펑

# 교육 목표
* 깃 쓰면서 자주 마주치는 상황
* 타인에게 피해를 줄 수 있는 명령어에 대하여

# 간단한 충돌 해결 실습
* 한 프로젝트를 두 명이 작업
* 한 명이 수정하고 커밋, 푸시
* 다른 한 명이 같은 라인을 수정하고 커밋, 푸시
* 어떻게 될까요

## 컨플릭트!
* 워, 워, 진정해.
* 풀을 받아본다
* 대차게 충돌난 부분이 꺽쇠로 표시됨.
* 해당 부분을 잘 수정하고, 소스트리에서 충돌 해결한 것으로 표시한다.
* 커밋을 다시 해보면 이미 커밋 메시지는 완성되어 있다.

# 커밋이란.
* = 레포지터리에 변경사항을 기록
    * 기술적으로는 맞는데, 업무로 깃을 쓰자면 커밋은 또 다른 방향에서 봐야 한다.
* 하나의 커밋은 하나의 의미만 지녀야 함.

## 어떤 객체에 인스턴스 필드를 하나 추가했다.
* 추가하는 김에, 다른 메서드가 마음에 안 들어서 겸사겸사 고침
* __이러면! 망해요!__
    * 예시 : 개발 후 한참 지난 어느 날, 치명적인 문제 발생
    * 어찌어찌 커밋 히스토리를 뒤져 해당 커밋을 찾아 원상복구함
    * 그랬더니 다른 곳에서 버그가 터짐
        * 왜죠?
        * 한 커밋에 여러 가지 일을 했으니까.

### 망하는 경우 2호기
* 하루 종일 온갖 일을 다 한 후에, 퇴근 전에 하나의 커밋으로 묶어 푸시하는 사람도 있다
    * __이러면! 망해요!__

# 깃을 공부하기 어려운 이유
* 빈 레포지터리 만들어 연습하기엔 너무 기본적인 상황만 만들어짐
* 실제 프로젝트 레포지터리에다 하면
    * 이러다 꼬이면?

## UNDO
* 이상한 짓을 해도 되돌릴 수 있다! 만세!

### 연습해보자
* 일단 실습한 내용을 싹 다 지우고 커밋한다.
* ....망했네
* `git reflog`
    * 이 때까지의 이력이 다 나와 있음
    * 이전 이력을 보고, 정상적인 시절의 HEAD 값을 확인하자.
* `git reset --hard HEAD@{숫자}`
    * 그 때 그 시절로 돌아간다
    * 그리고 이 리셋 또한 로그에 남는다, 다시 reflog를 해보자.

### 주의사항
* 로컬에서 한 이상한 짓은 이렇게 쉽게 고칠 수 있음.
* 그러나 푸시를 해서 레포지터리로 나가게 되면
    * __이러면! 망해요!__

### 잘못 커밋했는데 푸시까지 해버렸어요!
* 커밋하고 푸시까지 해버렸네, 어쩌지?
* `revert` 를 사용하자!
* 했던 짓을 역으로 다시 한다.
    * 안전

### 커밋만 했으면 리셋, 푸시까지 했으면 리버트.

# 브랜치
* 왜 브랜치를 따로 쓰는걸까?

## 흔한 상황
* 드로우 테이블 메서드가 있습니다
* 테이블을 차트로 바꿔달라네요?
* 드로우 테이블 메서드는 3일 후 드로우 차트 메서드가 되었습니다

### 심각한 오류의 등장
* 브랜치가 없으면 딱 망하기 좋다

## 브랜치를 쓰.....어야 하는데, 수정사항이 아주 작다면 어쩌지?
* 그래도 브랜치 만들어?
* __응__

### 아주 작은 수정사항을 반영하고 바로 커밋푸시 했을 경우
* 그런데 추가 수정이 생겼어
* 그러면 수정사항이 마스터에 들어가서 한없이 대기하게 된다.
* 오 제발 아무 버그도 없어라 제발
* 뭐 이런 이유도 있고, 수정 사항이 시작은 작았으나 그 끝이 창대할 수도 있고 하니까, 조금만 수정해도 브랜치는 만드는 것이 좋을 것이다.

## 브랜치 실습 : 이미 커밋을 했는데 이 브랜치가 아니었네
* 어쨌든 커밋까진 된 상태
* 그럼.... 일단, 브랜치를 따긴 따자.
* 그러면 마스터랑 브랜치랑 같은 포인트를 가리키게 된다. 브랜치에 수정사항을 넣는 목표는 달성
* 마스터를 되돌리면 된다
    * 이전 커밋에서 리셋 마스터 투 디스 커밋
    * 모드는 --HARD : 모든 수정사항을 버림

## 브랜치 실습 2 : 수정사항 때문에 브랜치 이동이 안 된다!
* 웬만하면 이동은 자유로운데, 같은 라인을 수정했다면 브랜치간 이동이 안 될 수도 있음.
* 스태시를 쓰자!   

### 파일의 변경사항을 '커밋하지 않고'옆 브랜치로 넘어감.
 * 그럼 변경사항이 지워지는뎁쇼
    * 안됩니다요 안돼
* 스태시 버튼을 눌러 적당한 멘트를 넣고, 저장한다
    * 이후 저장하지 않은 변경 내용이 없어졌다는 것을 알 수가 있다.

# 깃허브

## 풀 리퀘스트

## 풀을 하는 시점
* 가끔 최신 소스의 API가 필요한 때도 있다.
    * 패치를 해서 모든 커밋 가져옴
    * 오리진 마스터에서 우클릭, 풀 오리진/마스터 인투 디스 브랜치

## 원격 레포지터리가 난리가 난 경우
* 그 중에 한 명의 소스가 그나마 목숨줄은 달려 있음
* 목숨줄 달린 소스를 푸시할 수 없나? 
    * 그냥 하려 하면 에러 뜸
* 강제로 해야지!
    * `git push -f ...`

### 누가 내 레파지터리에 마음대로 강제푸시하면?
* 깃허브 내 레포지터리 설정에서 막을 수 있다.

# 기타 알면 도움되는 것들

## 방금 전에 만든 커밋 수정하기
* 커밋 메시지를 잘못 썼거나, 파일을 깜빡했거나.
    * `git commit --amend'`
    * 에디터가 뜬답니다.
        * 알아서 잘 수정해본다

### 주의사항
* 기존 커밋을 지우고 새로 만들어주는 것임
    * = 절대 푸시된 커밋을 수정하면 안 된다!

## 들어가서는 안 될 파일이 들어간 경우.
* .log, .class 등의 파일은 부산물이고, 레포지터리에 올라가면 작게는 보기 안 좋고, 크게는 충돌이 대차게 남.
* 주적 중지를 하면 일단 스테이지에서는 내려간다.
* 그런데 파일 자체는 계쏙 있기 때문에, 앞으로 커밋 때마다 관리를 해줘야 함

### 아예 무시는 못 하나?
* `.gitignore` 파일 작성

# 요약

## 푸시하기 전
* `reset --hard HEAD@{}`
* `commit --amend`
* 로컬에선 뭘 해도 되돌릴 수 있으니, 얘네로 정리한 후에 푸시하자!